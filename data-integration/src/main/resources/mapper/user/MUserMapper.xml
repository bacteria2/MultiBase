<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.data.relationdb.user.dao.MUserMapper">
    <cache eviction="FIFO"/>
  <resultMap id="BaseResultMap" type="com.multi.data.relationdb.user.MUser">
    <id column="user_id" jdbcType="BIGINT" property="id" />
    <result column="user_username" jdbcType="VARCHAR" property="username" />
    <result column="user_password" jdbcType="VARCHAR" property="password" />
    <result column="user_salt" jdbcType="VARCHAR" property="salt" />
    <result column="user_email" jdbcType="VARCHAR" property="email" />
    <result column="user_mobile" jdbcType="VARCHAR" property="mobile" />
    <result column="user_nickName" jdbcType="VARCHAR" property="nickname" />
    <result column="user_status" jdbcType="TINYINT" property="status" />
    <result column="user_last_login_ip" jdbcType="VARCHAR" property="lastLoginIp" />
    <result column="user_last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
    <result column="user_creator" jdbcType="VARCHAR" property="creator" />
    <result column="user_last_modifier" jdbcType="VARCHAR" property="modifier"/>
    <result column="user_create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="user_update_time" jdbcType="TIMESTAMP" property="updateTime" />

  </resultMap>

    <resultMap id="UserRoleMap" type="com.multi.data.relationdb.user.MUser" extends="BaseResultMap">
        <collection property="roleList"  ofType="com.multi.data.relationdb.role.MRole"
                    javaType="ArrayList" resultMap="com.multi.data.relationdb.role.dao.MRoleMapper.BaseResultMap"/>
    </resultMap>

  <sql id="Base_Column_List">
    user.id as user_id, user.username as user_username, user.password as user_password, 
    user.salt as user_salt, user.status as user_status, user.email as user_email, user.mobile as user_mobile, 
    user.nickName as user_nickName, user.last_login_ip as user_last_login_ip, user.last_login_time as user_last_login_time, 
    user.creator as user_creator,user.last_modifier as user_last_modifier, user.create_time as user_create_time, user.update_time as user_update_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from multi_demo_user user
    where user.id = #{id,jdbcType=BIGINT} and deleted != '1'
  </select>



  <insert id="insertSelective" parameterType="com.multi.data.relationdb.user.MUser" useGeneratedKeys="true" keyProperty="id">
    insert into multi_demo_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="mobile != null">
        mobile,
      </if>
      <if test="nickname != null">
        nickName,
      </if>
      <if test="lastLoginIp != null">
        last_login_ip,
      </if>
      <if test="lastLoginTime != null">
        last_login_time,
      </if>
      <if test="creator != null">
        creator,
      </if>
      <if test="modifier != null">
        last_modifier,
      </if>
        create_time,
        update_time
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=INTEGER},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginIp != null">
        #{lastLoginIp,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="modifier != null">
        #{modifier,jdbcType=VARCHAR},
      </if>
      now(),now()
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.multi.data.relationdb.user.MUser">
    update multi_demo_user
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        mobile = #{mobile,jdbcType=INTEGER},
      </if>
      <if test="nickname != null">
        nickName = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginIp != null">
        last_login_ip = #{lastLoginIp,jdbcType=VARCHAR},
      </if>
      <if test="lastLoginTime != null">
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="creator != null">
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="modifier != null">
        last_modifier = #{modifier,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <!---->
  <select id="selectUserRolesByUserId" parameterType="java.lang.Long"  resultMap="UserRoleMap">
   select
      <include refid="Base_Column_List" />,
    <include refid="com.multi.data.relationdb.role.dao.MRoleMapper.Base_Column_List" />
    from(select * from multi_demo_user where id=#{userId,jdbcType=VARCHAR} and deleted != '1'  )as user
    left JOIN multi_demo_user_role  as user_role on user.id=user_role.user_id
    left join multi_demo_role as  role on user_role.role_id=role.id
  </select>

  <select id="selectAllUser" resultMap="BaseResultMap" >
    select <include refid="Base_Column_List" /> from multi_demo_user as user  where deleted != '1' ORDER BY update_time DESC
  </select>


  <!--使用用户名查找用户-->
  <select id="selectUserByUserName" resultMap="BaseResultMap" parameterType="java.lang.String" resultType="com.multi.data.relationdb.user.MUser">
    select <include refid="Base_Column_List" /> from multi_demo_user as user WHERE username=#{userName,jdbcType=VARCHAR} and deleted != '1'
  </select>

  <!--逻辑删除-->
  <update id="deleteById" parameterType="java.lang.Long">
    update multi_demo_user set deleted=1 where id=#{id}
  </update>

  <!--用户名,手机,邮箱重复查询 逻辑删除-->
  <select id="userExistCheck" parameterType="com.multi.data.relationdb.user.MUser" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> FROM multi_demo_user as user
    <where>
      <if test="id != null">
        id=#{id}
      </if>
      <if test="mobile != null">
        or mobile=#{mobile}
      </if>
      <if test="username != null">
        or username=#{userName}
      </if>
      <if test="email != null">
        or email=#{email}
      </if>
      <if test="email == null and username == null and mobile==null">
        mobile='' and username='' and email=''
      </if>
    </where>
  </select>

  <insert id="addUserRoles">
    INSERT into multi_demo_user_role
    (role_id, user_id, creator, create_time, update_time,last_modifier) VALUES
    <foreach collection="roleIds" item="roleId" separator=",">
      (#{roleId},#{userId},#{creator},now(),now(),#{creator})
    </foreach>
  </insert>

</mapper>