<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.data.relationdb.role.dao.MRoleMapper">
    <resultMap id="BaseResultMap" type="com.multi.data.relationdb.role.MRole">
        <id column="role_id" jdbcType="BIGINT" property="id"/>
        <result column="role_role" jdbcType="INTEGER" property="role"/>
        <result column="role_name" jdbcType="VARCHAR" property="name"/>
        <result column="role_description" jdbcType="VARCHAR" property="description"/>
        <result column="role_status" jdbcType="TINYINT" property="status"/>
        <result column="role_creator" jdbcType="VARCHAR" property="creator"/>
        <result column="role_create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="role_update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>

    <resultMap id="RoleUserMap" type="com.multi.data.relationdb.role.MRole" extends="BaseResultMap">
        <collection property="userList" javaType="ArrayList" ofType="com.multi.data.relationdb.user.MUser"
                    resultMap="com.multi.data.relationdb.user.dao.MUserMapper.BaseResultMap"/>
    </resultMap>
    <sql id="Base_Column_List">
        role.id as role_id, role.role as role_role, role.name as role_name, role.description as role_description, role.status as role_status,
        role.creator as role_creator, role.create_time as role_create_time, role.update_time as role_update_time
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from multi_demo_role role
        where role.id = #{id,jdbcType=BIGINT} and deleted='0'
    </select>

    <insert id="insertSelective" parameterType="com.multi.data.relationdb.role.MRole" useGeneratedKeys="true"
            keyProperty="id">
        insert into multi_demo_role
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="role != null">
                role,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="creator != null">
                creator,
            </if>
            create_time,
            update_time
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="role != null">
                #{role,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                #{description,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=TINYINT},
            </if>
            <if test="creator != null">
                #{creator,jdbcType=VARCHAR},
            </if>
            now(),
            now()
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.multi.data.relationdb.role.MRole">
        update multi_demo_role
        <set>
            <if test="role != null">
                role = #{role,jdbcType=INTEGER},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="description != null">
                description = #{description,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=TINYINT},
            </if>
            <if test="creator != null">
                creator = #{creator,jdbcType=VARCHAR},
            </if>
            update_time =now(),
        </set>
        where id = #{id}
    </update>


    <select id="selectRoleUsersByRoleId" parameterType="java.lang.Long" resultMap="RoleUserMap">
        select
        <include refid="Base_Column_List"/>,
        <include refid="com.multi.data.relationdb.user.dao.MUserMapper.Base_Column_List"/>
        from(select * from multi_demo_role where id=#{userId,jdbcType=VARCHAR} and deleted ='0' )as role
        left JOIN multi_demo_user_role as user_role on role.id=user_role.role_id
        left join multi_demo_user as user on user_role.user_id=user.id
    </select>

    <select id="selectAllRole" resultType="ArrayList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from multi_demo_role as role where deleted ='0'
    </select>

    <insert id="batchInsertRoleResources">
        INSERT into multi_demo_role_resource
        (role_id,resource_id,creator,create_time,update_time) VALUES
        <foreach collection="resourceIds" item="resource_id" separator=",">
            (#{roleId,jdbcType=VARCHAR},#{resource_id,jdbcType=VARCHAR},#{creator,jdbcType=VARCHAR},now(),now())
        </foreach>
    </insert>
    <insert id="batchInsertRoleUser">
        INSERT into multi_demo_user_role
        (user_id,role_id,creator,create_time,update_time) VALUES
        <foreach collection="userIds" item="user_id" separator=",">
            (#{user_id,jdbcType=VARCHAR},#{roleId,jdbcType=VARCHAR},#{creator,jdbcType=VARCHAR},now(),now())
        </foreach>
    </insert>

    <select id="roleExistCheck" resultMap="BaseResultMap" parameterType="com.multi.data.relationdb.role.MRole">
        select
        <include refid="Base_Column_List"/>
        from multi_demo_role as role
        <where>
            deleted ='0'
            <if test="id!=null">
                or id=#{id}
            </if>
            <if test="role!=null">
                or role=#{role}
            </if>
            <if test="id==null and role==nul">
                role='-1'
            </if>
        </where>
    </select>

    <!--逻辑删除-->
    <update id="deleteById" parameterType="java.lang.Long">
        update multi_demo_role set deleted=1 where id=#{id}
    </update>

    <select id="getRolesByUserId" resultType="java.lang.String">
        select role.role from(select role_id from multi_demo_user_role where user_id=#{id}) as user_role
        join multi_demo_role role on user_role.role_id=role.id
    </select>
</mapper>